Release notes: Highlights of new features
=========================================


version 0.83.3 20 Sep 2006
--------------------------

 * Point and Pointset behaviour modified to make access to values or arrays
     of values (respectively) easier. Now, a Point pt['x'] is not the same
     as pt[['x']]. The former now returns the numeric value, the latter a
     new Point containing only the coordinate 'x'. Behaviour with a Pointset
     pts is altered similarly, except pts['x'] would be an array of numeric
     values.
 * Pointsets can now be initialized with independent variable arrays in
     reverse order (e.g., from a backwards integration). The initializer
     method now automatically detects the reverse order and reverses both
     the independent and dependent variable arrays before creating the
     Pointset.
 * Updated FuncSpec and Generators to allow specs to be provided by lists
     of symbolic quantities,
 * Provided better support for bounds events in C and Python specifications.
     See tests/HH_model_testbounds.py and HH_model_Cintegrator_testbounds.py
 * Provided helper functions to automatically create turning-point and zero
     crossing events for oDE right-hand sides and other auxiliary functions
     from ModelSpec definitions,
 * Fixed symbolic.py to properly process string literals.
 * Fixed bugs in defining Jacobian with respect to parameters.
 * Other bug fixes for ModelConstructor, ModelSpec, Symbolic.
 * Fixed bugs in Model/Trajectory sample methods to properly use tlo and thi
     limits with precise=False option and eventdata option turned off.
 * Added data analysis toolbox for use in data-driven dynamical systems
     modelling. Moved some functions over from fracdim.py toolbox.
 * Fixed bug in using global time with hybrid systems that have external
     inputs.
 * Event definitions now support external inputs.
 * Suppressed messages to stdout from compilers and calls to minpack
     optimizers.

PyCont 0.3.1:
 * Two plotting methods were added to plot_cycles:  'stack' and 'highlight'.
 * Added continuation argument 'StopAtPoints', allowing computation to stop
     at specified special points.
 * Added domain checking through introduction of a new special point labeled
    'B' for 'Boundary'. Note that if 'B' is active (through specification in
     LocBifPoints), domain information is saved along the curve with the
     labels 'inside' and 'outside'.
 * Added continuation argument 'description' allowing the user to give details
     on the specific curve computation.  When the info() method is called from
     the curve class, the description will be displayed.
 * Added argument SPOut to the LimitCycle class, allowing the user to stop at
     specified values of variables or parameters.
 * Jacobians with respect to variables is now implemented in AUTO interface.
     Jacobians with respect to parameters is currently not working, but will
     be added very soon in a minor release.
 * Added get() method to plot class.
 * Bug fixes (see PyCont/README for details).


version 0.83.2, 16 Jun 2006 (w/ patch #1)
-----------------------------------------

 * Provided support for 1D Jacobians for generators (only D>1
    was previously supported).
 * Fixed bug with symbolic differentiation and simplification of expressions
    involving parsing of division of compound expressions, where braces are
    not explicitly given.
 * Points, pointsets, and parameter estimation objects are initialized
    with keywords now, not dictionaries (although points and pointsets
    retain dictionary backwards compatibility ... for now).
 * Parameterized pointsets now have the option to be referenced by values
    that are within a small tolerance of the defined independent variable
    values.
 * Improved syntax for common object methods: 'computeTraj' is now 'compute',
     'sampleTraj' is now 'sample', 'setPars' for generators is now 'set',
     'setParsModel' for models is now 'set'. Previous method names are still
     valid for now.
 * Allowed C-target FuncSpec objects to use multi-references in definitions
 * Model trajectories can now be referenced and deleted using the
     m[traj_name] notation, where m is a Model object.
 * Fixed EventMappings bug for multiple assignments specified by dictionary.
 * Update of Toolbox utilities.
 * Other minor bug fixes.

 * PyCont:
   - Overhaul of plotting so that bifurcation diagrams can be adjusted
      through a curve's 'plot' attribute.
   - AUTO is interfaced for limit cycle continuation. Requires external
      C compiler access in the same way as the Dopri and Radau integrators.
   - Improvements to the PyCont API.
   - Support for bifurcations of discrete maps


05 Apr 2006
-----------

 * Fixed bug in matplotlib_import for len(args)==0 to plot()
 * Fixed bug (again!) in Radau_ODEsystem when continuing orbits


Version 0.83.1, 30 Mar 2006
---------------------------

 * Trajectory objects that can be sampled with default options
    (by calling the sampleTraj method with no arguments) are now
    acceptable plot call arguments, without first needing to be
    converted to Pointsets or arrays.

 * Updated some internal use of imports to improve compatibility with
    numarray 1.4.1 and 1.5.1.

 * Improved consistency in output of Model class for "hierarchical
    names", especially in getTrajEvents, getTrajEventTimes, forceIntVars,
    forceObsVars.

 * Minor bug fixes and improvements.

PyCont:

 * An initial direction can now be specified for a new curve.
     This is useful for following multiple branches.
     See PyCont_Logistic.py
 * Added SaveJacobian and SaveEigen parameters
 * Added computeEigen method to curves.  Once the eigen information is
    computed, you can plot the stability of the fixed points by activating
    the plot_stability flag in the call to display()
 * Added an exportGeomview() method to export the curves to a Geomview
    data file (default is geom.dat)
 * Discrete maps are now implemented (curve class FP-C) with the fold,
    flip and torus bifurcations detected.
 * Added pseudo-arclength continuation (Keller method).  This is unstable
    right now (trouble detecting bifurcation points). Use only when
    MoorePenrose gives strange output.
 


Version 0.83, 12 Mar 2006
-------------------------

PyCont continuation:
  * More bifurcations can be detected
  * Improved user interface / graphing capabilities
  * Exporting data to Pointsets now possible
  * Added example PyCont_LotkaVolterra.py (gonna use this as test example
     for variable and par bounds)
  * Added example PyCont_PredPrey.py (example with Zero-Hopf point)

Pointsets and Points:
  * Arithmetic and comparison operations now supported
  * Both classes now have an associated norm (defaults
      to the 2-norm) in order to implement point-wise
      comparison
  * Labelling of points better implemented
  * Calling Pointsets now only applies if they are
     parameterized, when argument must be an independent
     variable value. Other functionality previously
     associated with calling has been moved to
     [] referencing. Calling is now more efficient for
     its original intended purpose
  * Setitem for Pointsets now allows setting of entire
     coordinate or independent variable array
  * Full support for Points to be used as dictionaries
  * Better support for Pointsets to be used like arrays

Symbolic
  * Fixed handling of functions under differentiation to
     make more sense
  * Can now declare symbolic functions without defining them,
     and can differentiate them symbolically
  * Introduction of symbolic vectors and vector functions
  * Symbolic eval() more efficient, more intelligent
  * Fixed minor bugs and added many minor features

Generators
  * Definition can now be done using Quantity objects as well
     as strings
  * Initialization keyword syntax simplified, partly to reflect
     the fact that instances of class args() can be provided
     instead of dictionaries
    - 'specstrdict' -> 'varspecs'
    - 'auxfndict'   -> 'fnspecs'
    - 'xdatadict'   -> 'ics'
    - 'parameters'  -> 'pars'
  * External input signals (as arrays) can now be passed to
     the vector field in Dopri and Radau integrators
  * New ADMC++ target for Matlab (to facilitate automatic differentiation
     and parameter sensitivity calculations)
  * Fixed some Radau compilation issues on non-Windows platforms
  * Added 'method' key to InterpTable to allow piecewise-constant
     interpolation of data (key value = 'constant' or 'linear')

Tests
  * Added a couple of new test and example scripts, e.g. for
     a SloppyCell model, and for symbolic differentiation and
     manipulation.

Memory management
  * Used cPickle on non-Windows platforms to improve
     efficiency of object __copy__ methods

Models
  * No longer need to provide initial condition to
     computeTraj call for single vector field model